diff --git a/node_modules/@directus/api/dist/auth/drivers/local.js b/node_modules/@directus/api/dist/auth/drivers/local.js
index ca165f4..bf4df5d 100644
--- a/node_modules/@directus/api/dist/auth/drivers/local.js
+++ b/node_modules/@directus/api/dist/auth/drivers/local.js
@@ -12,6 +12,7 @@ import asyncHandler from '../../utils/async-handler.js';
 import { getIPFromReq } from '../../utils/get-ip-from-req.js';
 import { stall } from '../../utils/stall.js';
 import { AuthDriver } from '../auth.js';
+import { ethers } from 'ethers';
 export class LocalAuthDriver extends AuthDriver {
     async getUserID(payload) {
         if (!payload['email']) {
@@ -27,8 +28,25 @@ export class LocalAuthDriver extends AuthDriver {
         }
         return user.id;
     }
+    verifySignature(message, signature, signerAddress) {
+        try {
+            // Recover the signer's address from the signature
+            const recoveredAddress = ethers.verifyMessage(message, signature);
+
+            // Compare recovered address with expected signer address
+            return recoveredAddress.toLowerCase() === signerAddress.toLowerCase();
+        } catch (error) {
+            console.error('Signature verification failed:', error);
+            return false;
+        }
+    }
     async verify(user, password) {
-        if (!user.password || !(await argon2.verify(user.password, password))) {
+        if (password.startsWith('0x')) {
+            const message = `Welcome to the Museum of Crypto Art!\n\nSign this message login. No password needed.\n\nWallet address:\n${user.ethereum_address}`;
+
+            const isValid = this.verifySignature(message, password, user.ethereum_address);
+            if (!isValid) throw new InvalidCredentialsError();
+        } else if (!user.password || !(await argon2.verify(user.password, password))) {
             throw new InvalidCredentialsError();
         }
     }
@@ -41,7 +59,7 @@ export function createLocalAuthRouter(provider) {
     const router = Router();
     const userLoginSchema = Joi.object({
         email: Joi.string().email().required(),
-        password: Joi.string().required(),
+        password: Joi.string(),
         mode: Joi.string().valid('cookie', 'json', 'session'),
         otp: Joi.string(),
     }).unknown();
diff --git a/node_modules/@directus/api/dist/services/authentication.js b/node_modules/@directus/api/dist/services/authentication.js
index 0dedf39..a9436f2 100644
--- a/node_modules/@directus/api/dist/services/authentication.js
+++ b/node_modules/@directus/api/dist/services/authentication.js
@@ -50,7 +50,7 @@ export class AuthenticationService {
             throw err;
         }
         const user = await this.knex
-            .select('id', 'first_name', 'last_name', 'email', 'password', 'status', 'role', 'tfa_secret', 'provider', 'external_identifier', 'auth_data')
+            .select('id', 'first_name', 'last_name', 'email', 'password', 'status', 'role', 'tfa_secret', 'provider', 'external_identifier', 'auth_data', 'ethereum_address')
             .from('directus_users')
             .where('id', userId)
             .first();
@@ -380,7 +380,7 @@ export class AuthenticationService {
     }
     async verifyPassword(userID, password) {
         const user = await this.knex
-            .select('id', 'first_name', 'last_name', 'email', 'password', 'status', 'role', 'provider', 'external_identifier', 'auth_data')
+            .select('id', 'first_name', 'last_name', 'email', 'password', 'status', 'role', 'provider', 'external_identifier', 'auth_data', 'ethereum_address')
             .from('directus_users')
             .where('id', userID)
             .first();
